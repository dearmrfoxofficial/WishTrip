name: Trip Wishlist Updates

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 13 * * 1"   # Weekly
    - cron: "0 13 * * *"   # Daily

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm install node-fetch@3

      - name: Generate reports
        env:
          TEQUILA_API_KEY: ${{ secrets.TEQUILA_API_KEY }}
        run: node scripts/check-deals.mjs

      - name: Create or update trip issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const reportsDir = path.join(process.cwd(), 'reports');
            if (!fs.existsSync(reportsDir)) {
              core.info('No reports to post.');
              return;
            }
            const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.md'));
            for (const file of files) {
              const title = 'Trip: ' + file.replace(/\.md$/, '');
              const body = fs.readFileSync(path.join(reportsDir, file), 'utf8');
              const { data: existing } = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} is:issue in:title "${title}"`
              });
              if (existing.items.length) {
                const issue = existing.items[0];
                await github.rest.issues.update({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue.number, body });
                core.info(`Updated issue #${issue.number} — ${title}`);
              } else {
                const created = await github.rest.issues.create({
                  owner: context.repo.owner, repo: context.repo.repo,
                  title, body, labels: ['travel','automated']
                });
                core.info(`Created issue #${created.data.number} — ${title}`);
              }
            }

      - name: Create or update weekly digest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const p = path.join(process.cwd(), 'reports', 'digest.json');
            if (!fs.existsSync(p)) { core.info('No digest data.'); return; }
            const digest = JSON.parse(fs.readFileSync(p, 'utf8'));
            const title = 'Trip Wishlist — Weekly Digest';
            let body = '# Weekly Digest\n\n';
            if (!digest.length) {
              body += '_No price-qualified options this cycle._\n';
            } else {
              for (const item of digest) {
                body += `## ${item.trip}\n`;
                for (const o of item.options) {
                  body += `- $${o.price} — ${o.home} → ${o.dest} — ${o.depart} → ${o.ret} — [book](${o.link})\n`;
                }
                body += '\n';
              }
            }
            const { data: existing } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:issue in:title "${title}"`
            });
            if (existing.items.length) {
              const issue = existing.items[0];
              await github.rest.issues.update({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue.number, body });
              core.info(`Updated digest issue #${issue.number}`);
            } else {
              const created = await github.rest.issues.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title, body, labels: ['digest','automated']
              });
              core.info(`Created digest issue #${created.data.number}`);
            }
